{% if site_proxy == "nodejs" %}

upstream {{ site_proxy_name }} {
  server {{ site_proxy_ip }}:{{ site_proxy_port }} max_fails=0 fail_timeout=5s;
  keepalive 256;
}
{% endif %}

{% if site_ssl %}
# HTTP -> HTTPS
server {

  listen       80;
  server_name  {{ site_domain }} www.{{ site_domain }};
{% if site_www %}
  return       301 https://www.{{ site_domain }}$request_uri;
{% else %}
  return       301 https://{{ site_domain }}$request_uri;
{% endif %}
  # Option: $server_name

}
{% endif %}

server {

{% if site_ssl %}
  listen               443 ssl;
  ssl                  on;
  ssl_protocols        TLSv1.2 TLSv1.1 TLSv1;
  ssl_dhparam          /etc/nginx/ssl/dhparam.pem;
  ssl_certificate      /etc/nginx/ssl/{{ site_domain }}/{{ site_domain }}.crt;
  ssl_certificate_key  /etc/nginx/ssl/{{ site_domain }}/{{ site_domain }}.key;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;
  keepalive_timeout 70;
{% else %}
  listen  80;
{% endif %}

{% if site_www %}
  server_name  {{ site_domain }};
{% if site_ssl %}
  return       301 https://www.{{ site_domain }}$request_uri;
{% else %}
  return       301 http://www.{{ site_domain }}$request_uri;
{% endif %}
{% else %}
  server_name  www.{{ site_domain }};
{% if site_ssl %}
  return       301 https://{{ site_domain }}$request_uri;
{% else %}
  return       301 http://{{ site_domain }}$request_uri;
{% endif %}
{% endif %}

}

server {

{% if site_ssl %}
  listen               443 ssl;
  ssl                  on;
  ssl_protocols        TLSv1.2 TLSv1.1 TLSv1;
  ssl_dhparam          /etc/nginx/ssl/dhparam.pem;
  ssl_certificate      /etc/nginx/ssl/{{ site_domain }}/{{ site_domain }}.crt;
  ssl_certificate_key  /etc/nginx/ssl/{{ site_domain }}/{{ site_domain }}.key;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;
  keepalive_timeout 70;
  add_header Strict-Transport-Security "max-age=86400; includeSubdomains";
{% else %}
  listen  80;
{% endif %}

{% if site_www %}
  server_name  www.{{ site_domain }};
{% else %}
  server_name  {{ site_domain }};
{% endif %}

  #root    /var/www/public;
  root     /home/{{ ansible_ssh_user }}/{{ site_root }};
{% if site_proxy == "php" %}
  index    index.php index.html index.htm;
{% else %}
  index    index.html index.htm;
{% endif %}

  # Errors
  error_page  404              /404.html;
  error_page  500 502 503 504  /50x.html;
  #location = /50x.html {
  #  root /usr/share/nginx/html;
  #}

  # Patch for Underscores in Headers
  #underscores_in_headers on;

  # Static Files
  location ~* \.(css|js|jpeg|jpg|gif|png|ico|txt|woff|ttf|svg|eot|otf)$ {
    expires     -1;
    access_log  off;
    add_header  Cache-Control "public";
    # (woff|ttf|svg|eot|otf)
    # add_header  "Access-Control-Allow-Origin" "*";
  }

  # location = / { REDIRECT }
  # location = /dash.html { PASSWORD }

  # Remove Trailing Slash
  # Remove .html
  location / {
{% if site_password %}
    auth_basic  "Restricted";
    auth_basic_user_file /etc/nginx/htpasswd_{{ site_domain }};
{% endif %}
    expires     -1;
    access_log  off;
    rewrite     ^/index.html?$ / permanent;
    # Affects WordPress
    #rewrite     ^/(.*)/$ /$1 permanent;
    rewrite     ^/(.*)/index\.html$ /$1 permanent;
    rewrite     ^/(.*)\.html?$ /$1 permanent;
    rewrite     ^/(.+)\.$ /$1 permanent;

# TODO: Remove index.html
{% if site_proxy == "nodejs" %}
    try_files   $uri $uri.html $uri/index.html @proxy;
{% elif site_proxy == "php" %}
    # $uri.php?q=$uri&$args&$query_string
    try_files   $uri $uri/ /index.php?$args;
{% else %}
    try_files   $uri $uri.html $uri/index.html =404;
{% endif %}
  }

  # Redirects
{% for redirect in site_redirects %}
  location = {{ redirect.from }} { return 301 {{ redirect.to }}; }
{% endfor %}
{% if site_proxy == "php" %}

  location ~ \.php$ {
    try_files $uri =404;
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    fastcgi_pass unix:/var/run/php5-fpm.sock;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
  }
{% endif %}
{% if site_proxy == "nodejs" %}

  # Pass to Node.js
  location @proxy {
    proxy_pass        http://{{ site_proxy_name }};
    proxy_redirect    off;
    proxy_set_header  Host $host;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  }
{% endif %}
{% if site_websockets %}

  # WebSockets
  location /socket.io/ {
    proxy_pass         http://{{ site_proxy_name }};
    proxy_redirect     off;
    proxy_set_header   Host $host;
    proxy_set_header   X-Real-IP $remote_addr;
    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
    # WebSocket Part
    proxy_http_version 1.1;
    proxy_set_header   Upgrade $http_upgrade;
    proxy_set_header   Connection "upgrade";
  }
{% endif %}

}
